from langchain_community.vectorstores import SupabaseVectorStore
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_core.runnables import RunnableParallel
from langchain.prompts import PromptTemplate
from app.services.database_service import vector_db
from app.services.nlp_service import embeddings, chat_model
from app.services.blob_storage_service import get_file_url
import logging


def format_docs(docs):
    return "\n\n".join(doc.page_content for doc in docs)


def analyze_prior_authorization_against_requirements(
    insurance_provider,
    procedure,
    prior_authorization_text,
    cpt_code,
    additional_information,
):
    """
    Compares prior authorization text against insurance documentation semantically searched in database

    Parameters:
    -----------
    insurance_provider : string
        insurance type
    procedure : string
        procedure
    prior_authorization_text : string
        prior authorization letter
    cpt_code : string

    additional_information : string
        additional information

    Returns:
    --------
    List[Documents]
        Insurance docs that match insurance plan and procedure
    str
        Response text generated by GPT-4
    """
    try:
        logging.info("Starting prior authorization analysis")
        if not prior_authorization_text:
            raise Exception("Prior authorization text is required")

        vector_store = SupabaseVectorStore(
            embedding=embeddings,
            client=vector_db,
            table_name=insurance_provider,
            query_name=f"match_{insurance_provider}_documents",
        )
        retriever = vector_store.as_retriever()
        template = """You are a doctor assistant and patient advocate for analyzing prior authorization requests. You help doctors 
                    and hospital staff analyze the necessary documentation, labs, patient data to prove medical 
                    necessity for a procedure/prescription and get the prior authorization request approved. Use the 
                    following pieces of retrieved context from insurance documentation to determine whether the prior 
                    authorization request meets all of the requirements. If the requirements are met,
                    explain how exactly they are met, referencing the context. If they are not met, explain 
                    what the requirements are and how the doctor could meet them. If the letter does not have any information 
                    referencing a given requirement, assume it is not met. If you don't know the answer, 
                    just say that you don't know. Use markdown to bold requirements that are important and not being met. 
                    Keep your answer brief, predominantly using a bullet point format to denote which requirements are met and 
                    which ones are not met.
                    {context} 
                    This is the patient's insurance provider: {insurance_provider} 
                    This is the requested procedure: {procedure}
                    Question: {question}
                    Helpful Answer:
                    """
        pass_through_question = f"Does the prior authorization letter to {insurance_provider} to prove medical necessity for {procedure}? Content of the prior authorization letter: {prior_authorization_text}"
        if cpt_code:
            pass_through_question += f"\nThis is the CPT code: {cpt_code}"
        if additional_information:
            pass_through_question += (
                f"\nThis is the additional information: {additional_information}"
            )
        template += "\nHelpful Answer:"
        rag_prompt = PromptTemplate.from_template(template)
        rag_chain_from_docs = (
            RunnablePassthrough.assign(context=(lambda x: format_docs(x["context"])))
            | rag_prompt
            | chat_model
            | StrOutputParser()
        )
        rag_chain_with_source = RunnableParallel(
            {
                "context": retriever,
                "insurance_provider": RunnablePassthrough(value=insurance_provider),
                "procedure": RunnablePassthrough(value=procedure),
                "prior_authorization_text": RunnablePassthrough(
                    value=prior_authorization_text
                ),
                "question": RunnablePassthrough(),
            }
        ).assign(answer=rag_chain_from_docs)

        response = rag_chain_with_source.invoke(pass_through_question)
        response_text, matched_docs = response["answer"], response["context"]

        sources = set()
        for doc in matched_docs:
            sources.add(
                get_file_url(
                    doc.metadata["file_id"], doc.metadata["insurance_provider"]
                )
            )
        sources = list(sources)

        logging.info("Prior authorization analysis completed successfully")

        return response_text, sources

    except Exception as e:
        logging.error(f"Error during prior authorization analysis: {e}")
        # Raise a structured error message for the calling function to handle
        raise Exception(str(e))
